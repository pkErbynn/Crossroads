{"version":3,"file":"component---src-templates-page-js-content-file-path-content-background-mdx-2dc9bf5b7814c6d3ef60.js","mappings":"uIAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,MACFC,EAAAA,EAAAA,MAAsBL,EAAMM,YAC/B,OAAOC,EAAAA,cAAoBN,EAAYG,EAAG,KAAM,2hBAClD,CAKA,IAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOQ,QAASC,GAAaP,OAAOC,OAAO,CAAC,GAAGE,EAAAA,EAAAA,MAAsBL,EAAMM,YAC3E,OAAOG,EAAYF,EAAAA,cAAoBE,EAAWT,EAAOO,EAAAA,cAAoBR,EAAmBC,IAAUD,EAAkBC,EAC9H,C,0ICPA,MAAMU,EAAeC,IAAuC,IAAtC,MAACC,EAAK,KAAEC,EAAI,SAAEC,EAAQ,SAAEC,GAASJ,EACrD,OAAOJ,EAAAA,cAAoBS,EAAAA,EAAQ,CACjCH,KAAMA,EACNC,SAAUA,GACTP,EAAAA,cAAoB,UAAW,CAChCU,UAAW,qBACVV,EAAAA,cAAoB,SAAU,KAAMA,EAAAA,cAAoB,KAAM,KAAMK,IAASG,GAAU,EAG7E,SAASG,EAAiBlB,GACvC,OAAOO,EAAAA,cAAoBG,EAAcV,EAAOO,EAAAA,cAAoBY,EAAAA,EAAqBnB,GAC3F,CACO,MAAMoB,EAAOC,IAAyB,IAAxB,KAACR,EAAI,YAAES,GAAYD,EACtC,MAAMT,EAAWU,EAAYC,YAAYX,MAAK,MAAMC,EAAKW,KAAKC,aAAab,MAC3E,OAAOL,EAAAA,cAAoBmB,EAAAA,EAAU,CACnCd,MAAOA,GACNL,EAAAA,cAAoB,OAAQ,CAC7BoB,KAAM,cACNC,QAASN,EAAYO,cACpB,C","sources":["webpack://ms-gh-pages/./content/background.mdx","webpack://ms-gh-pages/./src/templates/page.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(_components.p, null, \"Crossroads is a tool to generate a single executable file to host any application and its content.\\nIt is an important component of the Morgan Stanley Modern Desktop Development Platform called ComposeUI.\\nWhile .NET applications do have a native option to be self contained, this tool brings that feature to Node.js, Python, Java, etc applications as well.\\nThis way applications can be distributable without requiring local installation or an app store.\\nApplications cam be packaged for both Windows and Linux by using just one tool.\");\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/runner/work/Crossroads/Crossroads/site/content/background.mdx\";\nimport React from 'react';\nimport {graphql} from 'gatsby';\nimport Layout from '../components/layout';\nimport PageHead from '../components/page-head';\nconst PageTemplate = ({title, data, location, children}) => {\n  return React.createElement(Layout, {\n    data: data,\n    location: location\n  }, React.createElement(\"article\", {\n    className: \"page-main content\"\n  }, React.createElement(\"header\", null, React.createElement(\"h2\", null, title)), children));\n};\nPageTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PageTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = ({data, pageContext}) => {\n  const title = `${pageContext.frontmatter.title} | ${data.site.siteMetadata.title}`;\n  return React.createElement(PageHead, {\n    title: title\n  }, React.createElement(\"meta\", {\n    name: \"description\",\n    content: pageContext.description\n  }));\n};\nexport const pageQuery = graphql`\n  query ($id: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    mdx(id: { eq: $id }) {\n      id\n      frontmatter {\n        date\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","_provideComponents","components","React","wrapper","MDXLayout","PageTemplate","_ref","title","data","location","children","Layout","className","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","_ref2","pageContext","frontmatter","site","siteMetadata","PageHead","name","content","description"],"sourceRoot":""}